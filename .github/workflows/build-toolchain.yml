name: Build toolchain

on: workflow_dispatch

jobs:
  build:
    if: github.event.repository.owner.id == github.event.sender.id
    name: Toolchain ${{ matrix.model }}-${{ matrix.tag.version }}-${{ matrix.libc }}
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        model:
          - nanopi-r5s
          - x86_64
        tag:
          - type: rc
            version: openwrt-22.03
          - type: dev
            version: openwrt-23.05
        libc:
          - musl
          - glibc
        exclude:
          - { model: x86_64, libc: glibc }

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Set time zone
      run: sudo timedatectl set-timezone 'Asia/Shanghai'

    - name: Show system
      run: |
        lscpu
        free -h
        uname -a

    - name: Set release env
      run: |
        if [[ ${{ matrix.model }} == "null" ]]; then
          echo "release=false" >> "$GITHUB_ENV"
        fi

    - name: Free disk space
      run: |
        sudo sed -i 's/azure.archive.ubuntu.com/mirror.enzu.com/g' /etc/apt/sources.list
        sudo rm -rf /etc/apt/sources.list.d
        sudo swapoff -a
        sudo rm -f /swapfile
        sudo docker image prune -a -f
        sudo systemctl stop docker
        sudo snap set system refresh.retain=2
        sudo apt-get -y purge dotnet* firefox clang* ghc* google* llvm* mono* mongo* mysql* php* g++-11-multilib gcc-11-multilib libncurses-dev libncurses5-dev
        sudo apt-get -y autoremove --purge
        sudo apt-get clean
        sudo rm -rf /etc/mysql /etc/php /usr/lib/jvm /usr/libexec/docker /usr/local /usr/src/* /var/lib/docker /var/lib/gems /var/lib/mysql /var/lib/snapd /etc/skel /opt/{microsoft,az,hostedtoolcache,cni,mssql-tools,pipx} /usr/share/{az*,dotnet,swift,miniconda,gradle*,java,kotlinc,ri,sbt} /root/{.sbt,.local,.npm}
        sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
        rm -rf ~/{.cargo,.dotnet,.rustup}
        df -h

    - name: Build System Setup
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential flex bison g++ gawk gcc-multilib g++-multilib gettext git libfuse-dev libncurses5-dev libssl-dev python3 python3-pip python3-ply python3-distutils python3-pyelftools rsync unzip zlib1g-dev file wget subversion patch upx-ucl autoconf automake curl proxychains-ng asciidoc binutils bzip2 lib32gcc-s1 libc6-dev-i386 uglifyjs msmtp texinfo libreadline-dev libglib2.0-dev xmlto libelf-dev libtool autopoint antlr3 gperf ccache swig coreutils haveged scons libpython3-dev
        sudo apt-get clean
        git config --global user.name 'GitHub Actions' && git config --global user.email 'noreply@github.com'
        df -h

    - name: Compile Toolchain
      run: |
        [ "${{ matrix.model }}" = "nanopi-r5s" ] && export BUILD_SDK=y
        [ "${{ matrix.libc }}" = "glibc" ] && export USE_GLIBC=y
        BUILD_TOOLCHAIN=y bash <(curl -sS ${{ secrets.script_url_general }}) ${{ matrix.tag.type }} ${{ matrix.model }}
        echo 'toolchain_arch<<EOF' >> $GITHUB_ENV
        cat openwrt/toolchain-cache/arch.txt >> $GITHUB_ENV
        echo 'EOF' >> $GITHUB_ENV

    - name: Upload FTP
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.ftp_address }}
        username: ${{ secrets.ftp_username }}
        password: ${{ secrets.ftp_password }}
        server-dir: /${{ matrix.tag.version }}/${{ env.toolchain_arch }}-${{ matrix.libc }}/
        local-dir: openwrt/toolchain-cache/
        dangerous-clean-slate: true
        exclude: |
          arch.txt
